package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JPanel;

public class GamePanel extends JPanel implements Runnable{
	
	private static final long serialVersionUID = 1L;
	
	final int originalTileSize = 32;
	final int scale = 1;
	final int FPS = 60;
	
	final int tileSize = originalTileSize * scale;
	final int maxScreenCol = 28;
	final int maxScreenRow = 20;
	
	final int screenWidth = tileSize * maxScreenCol;
	final int screenHeight = tileSize * maxScreenRow;
	
	KeyHandler keyH = new KeyHandler();
	Thread gameThread;
	
	int playerX = 100;
	int playerY = 100;
	int playerSpeed = 4;
	
	public GamePanel() {
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		this.setBackground(Color.black);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyH);
		this.setFocusable(true);
	}
	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}
	
	@Override
	public void run() {
		double drawInterval = 1000000000/FPS;
		double delta = 0;
		long lastTime = System.nanoTime();
		long currentTime;
		
		while (gameThread != null) {
			
			currentTime = System.nanoTime();
			
			delta += (currentTime - lastTime)/drawInterval;
			
			lastTime = currentTime;
			
			if (delta >= 1) {
				update(); // update
				
				repaint(); // draw
				
				delta--;
			}
		}
	}
	
	public void update() {
		if (keyH.upPressed) {
			playerY -= playerSpeed;
		}
		else if (keyH.downPressed) {
			playerY += playerSpeed;			
		}
		else if (keyH.leftPressed) {
			playerX -= playerSpeed;			
		}
		else if (keyH.rightPressed) {
			playerX += playerSpeed;			
		}
	}
	
	public void paintComponent(Graphics g) {
		
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D) g;
		
		g2.setColor(Color.white);
		g2.fillRect(playerX, playerY, tileSize, tileSize);
		g2.dispose();
	}
}
